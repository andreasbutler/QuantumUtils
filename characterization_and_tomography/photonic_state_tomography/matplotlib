{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook matplotlib\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../utils')\n",
    "\n",
    "from tomography import coherent_state_tomgraphy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../utils')\n",
    "\n",
    "from tomography import coherent_state_tomgraphy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../../utils')\n",
    "\n",
    "from tomography import coherent_state_tomgraphy as cst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../utils')\n",
    "\n",
    "print(sys.path)\n",
    "\n",
    "from tomography import coherent_state_tomgraphy as cst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../utils')\n",
    "\n",
    "print(sys.path)\n",
    "\n",
    "from tomography import coherent_state_tomgraphy as cst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../utils')\n",
    "\n",
    "print(sys.path)\n",
    "\n",
    "from tomography import coherent_state_tomography as cst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook matplotlib\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../utils')\n",
    "\n",
    "from tomography import coherent_state_tomography as cst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius alpha in phase\n",
    "# space are centered at photon number |alpha\n",
    "max_x = 4\n",
    "mesh_size = 0.25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "#\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius |alpha| in phase\n",
    "# space are centered at photon number N0 = |alpha|^2 with spread from\n",
    "# |alpha - 1/sqrt(2)|^2 to |alpha + 1/sqrt(2)|^2. If you're uncertain, just plot\n",
    "# the Fock amplitudes of the coherent space and go out far enough to be well in the\n",
    "# tail of the largest-radius coherent states of the mesh.\n",
    "max_x = 4\n",
    "mesh_size = 0.25\n",
    "dim =40\n",
    "\n",
    "# Proof that this dimension is satisfactory for the square size\n",
    "corner_alpha = 4 + 4j\n",
    "corner_coherent_state = qutip.coherent_dm(dim, corner_alpha)\n",
    "state_vis.plot_fock_basis_probabilities(corner_coherent_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import qutip as qutip\n",
    "import time as time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import sys\n",
    "sys.path.append('../../utils')\n",
    "\n",
    "from tomography import coherent_state_tomography as cst\n",
    "from visualization import state_visualization as state_vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "#\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius |alpha| in phase\n",
    "# space are centered at photon number N0 = |alpha|^2 with spread from\n",
    "# |alpha - 1/sqrt(2)|^2 to |alpha + 1/sqrt(2)|^2. If you're uncertain, just plot\n",
    "# the Fock amplitudes of the coherent space and go out far enough to be well in the\n",
    "# tail of the largest-radius coherent states of the mesh.\n",
    "max_x = 4\n",
    "mesh_size = 0.25\n",
    "dim =40\n",
    "\n",
    "# Proof that this dimension is satisfactory for the square size\n",
    "corner_alpha = 4 + 4j\n",
    "corner_coherent_state = qutip.coherent_dm(dim, corner_alpha)\n",
    "state_vis.plot_fock_basis_probabilities(corner_coherent_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "#\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius |alpha| in phase\n",
    "# space are centered at photon number N0 = |alpha|^2 with spread from\n",
    "# |alpha - 1/sqrt(2)|^2 to |alpha + 1/sqrt(2)|^2. If you're uncertain, just plot\n",
    "# the Fock amplitudes of the coherent space and go out far enough to be well in the\n",
    "# tail of the largest-radius coherent states of the mesh.\n",
    "max_x = 4\n",
    "mesh_size = 0.25\n",
    "dim =40\n",
    "\n",
    "# Proof that this dimension is satisfactory for the square size\n",
    "corner_alpha = 4 + 4j\n",
    "corner_coherent_state = qutip.coherent_dm(dim, corner_alpha)\n",
    "state_vis.plot_fock_basis_probabilities(corner_coherent_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "#\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius |alpha| in phase\n",
    "# space are centered at photon number N0 = |alpha|^2 with spread from\n",
    "# |alpha - 1/sqrt(2)|^2 to |alpha + 1/sqrt(2)|^2. If you're uncertain, just plot\n",
    "# the Fock amplitudes of the coherent space and go out far enough to be well in the\n",
    "# tail of the largest-radius coherent states of the mesh.\n",
    "max_x = 4\n",
    "mesh_size = 0.25\n",
    "dim =44\n",
    "\n",
    "# Proof that this dimension is satisfactory for the square size\n",
    "corner_alpha = 4 + 4j\n",
    "corner_coherent_state = qutip.coherent_dm(dim, corner_alpha)\n",
    "state_vis.plot_fock_basis_probabilities(corner_coherent_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "#\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius |alpha| in phase\n",
    "# space are centered at photon number N0 = |alpha|^2 with spread from\n",
    "# |alpha - 1/sqrt(2)|^2 to |alpha + 1/sqrt(2)|^2. If you're uncertain, just plot\n",
    "# the Fock amplitudes of the coherent space and go out far enough to be well in the\n",
    "# tail of the largest-radius coherent states of the mesh.\n",
    "max_x = 4\n",
    "mesh_size = 0.25\n",
    "dim =50\n",
    "\n",
    "# Proof that this dimension is satisfactory for the square size\n",
    "corner_alpha = 4 + 4j\n",
    "corner_coherent_state = qutip.coherent_dm(dim, corner_alpha)\n",
    "state_vis.plot_fock_basis_probabilities(corner_coherent_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "#\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius |alpha| in phase\n",
    "# space are centered at photon number N0 = |alpha|^2 with spread from\n",
    "# |alpha - 1/sqrt(2)|^2 to |alpha + 1/sqrt(2)|^2. If you're uncertain, just plot\n",
    "# the Fock amplitudes of the coherent space and go out far enough to be well in the\n",
    "# tail of the largest-radius coherent states of the mesh.\n",
    "max_x = 4\n",
    "mesh_size = 0.25\n",
    "dim =55\n",
    "\n",
    "# Proof that this dimension is satisfactory for the square size\n",
    "corner_alpha = 4 + 4j\n",
    "corner_coherent_state = qutip.coherent_dm(dim, corner_alpha)\n",
    "state_vis.plot_fock_basis_probabilities(corner_coherent_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An example of coherent state mle of the equal superposition 0-1 photon state\n",
    "# afflicted by thermal noise of on average 1 photon\n",
    "\n",
    "# Set the width of the square in phase space we are considering and the meshing.\n",
    "#\n",
    "# Additionally set the dimension of the Hilbert space (ie: the max photon number\n",
    "# state after which we truncate Fock space). This number should be selected so\n",
    "# that we have enough photon states to well-represent the coherent states in the \n",
    "# corners of our mesh, recalling that the coherent states at radius |alpha| in phase\n",
    "# space are centered at photon number N0 = |alpha|^2 with spread from\n",
    "# |alpha - 1/sqrt(2)|^2 to |alpha + 1/sqrt(2)|^2. If you're uncertain, just plot\n",
    "# the Fock amplitudes of the coherent space and go out far enough to be well in the\n",
    "# tail of the largest-radius coherent states of the mesh.\n",
    "max_x = 4\n",
    "mesh_size = 0.25\n",
    "dim =54\n",
    "\n",
    "# Proof that this dimension is satisfactory for the square size\n",
    "corner_alpha = 4 + 4j\n",
    "corner_coherent_state = qutip.coherent_dm(dim, corner_alpha)\n",
    "state_vis.plot_fock_basis_probabilities(corner_coherent_state)"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
